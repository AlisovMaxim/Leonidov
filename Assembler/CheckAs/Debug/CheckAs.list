
CheckAs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000ac  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001dc  080001e4  000011e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001dc  080001dc  000011e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080001dc  080001dc  000011e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080001dc  080001e4  000011e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001dc  080001dc  000011dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000011e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080001e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080001e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000078  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000005e  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000030  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000024  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000028  00000000  00000000  00001338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000007a  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080001c4 	.word	0x080001c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080001c4 	.word	0x080001c4

08000170 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

	ldr		r0, =_estack
 8000170:	480e      	ldr	r0, [pc, #56]	@ (80001ac <delay_loop+0x8>)
 	mov		sp, r0          			/* set stack pointer */
 8000172:	4685      	mov	sp, r0

	ldr		r0, =PERIPH_BB_BASE + (RCC_APB2ENR-PERIPH_BASE)*32 + 2*4
 8000174:	480e      	ldr	r0, [pc, #56]	@ (80001b0 <delay_loop+0xc>)
										@ вычисляем адрес для BitBanding 2-го бита регистра RCC_APB2ENR
	mov		r1, #1						@ включаем тактирование порта A (во 2-й бит RCC_APB2ENR пишем '1`)
 8000176:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем это значение
 800017a:	6001      	str	r1, [r0, #0]

	ldr		r0, =GPIOA_CRL				@ адрес порта
 800017c:	480d      	ldr	r0, [pc, #52]	@ (80001b4 <delay_loop+0x10>)
	mov		r1, #0x03					@ 4-битная маска настроек для Output mode 50mHz, Push-Pull ("0011")
 800017e:	f04f 0103 	mov.w	r1, #3
	ldr		r2, [r0]					@ считать порт
 8000182:	6802      	ldr	r2, [r0, #0]
    bfi		r2, r1, #20, #4    			@ скопировать биты маски в позицию PIN5
 8000184:	f361 5217 	bfi	r2, r1, #20, #4
    str		r2, [r0]					@ загрузить результат в регистр настройки порта
 8000188:	6002      	str	r2, [r0, #0]

    ldr		r0, =GPIOA_BSRR				@ адрес порта выходных сигналов
 800018a:	480b      	ldr	r0, [pc, #44]	@ (80001b8 <delay_loop+0x14>)

0800018c <loop>:

loop:									@ Бесконечный цикл
	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 800018c:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 8000190:	6001      	str	r1, [r0, #0]

	bl		delay						@ задержка
 8000192:	f000 f806 	bl	80001a2 <delay>

	ldr		r1, =GPIO_BSRR_BR5			@ сбрасываем в '0'
 8000196:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
	str 	r1, [r0]					@ загружаем в порт
 800019a:	6001      	str	r1, [r0, #0]

	bl		delay						@ задержка
 800019c:	f000 f801 	bl	80001a2 <delay>

	b 		loop						@ возвращаемся к началу цикла
 80001a0:	e7f4      	b.n	800018c <loop>

080001a2 <delay>:

delay:									@ Подпрограмма задержки
	ldr		r3, =0xFFFFF				@ псевдоинструкция Thumb (загрузить константу в регистр)
 80001a2:	4b06      	ldr	r3, [pc, #24]	@ (80001bc <delay_loop+0x18>)

080001a4 <delay_loop>:
delay_loop:
	subs	r3, #1						@ SUB с установкой флагов результата
 80001a4:	3b01      	subs	r3, #1
	it 		NE
 80001a6:	bf18      	it	ne
	bne		delay_loop					@ переход, если Z==0 (результат вычитания не равен нулю)
 80001a8:	e7fc      	bne.n	80001a4 <delay_loop>
	bx		lr							@ выход из подпрограммы (переход к адресу в регистре LR - вершина стека)
 80001aa:	4770      	bx	lr
	ldr		r0, =_estack
 80001ac:	20005000 	.word	0x20005000
	ldr		r0, =PERIPH_BB_BASE + (RCC_APB2ENR-PERIPH_BASE)*32 + 2*4
 80001b0:	42420308 	.word	0x42420308
	ldr		r0, =GPIOA_CRL				@ адрес порта
 80001b4:	40010800 	.word	0x40010800
    ldr		r0, =GPIOA_BSRR				@ адрес порта выходных сигналов
 80001b8:	40010810 	.word	0x40010810
	ldr		r3, =0xFFFFF				@ псевдоинструкция Thumb (загрузить константу в регистр)
 80001bc:	000fffff 	.word	0x000fffff

080001c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c0:	e7fe      	b.n	80001c0 <ADC1_2_IRQHandler>
	...

080001c4 <_init>:
 80001c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001c6:	bf00      	nop
 80001c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001ca:	bc08      	pop	{r3}
 80001cc:	469e      	mov	lr, r3
 80001ce:	4770      	bx	lr

080001d0 <_fini>:
 80001d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001d2:	bf00      	nop
 80001d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001d6:	bc08      	pop	{r3}
 80001d8:	469e      	mov	lr, r3
 80001da:	4770      	bx	lr
