
Buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000013c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800026c  08000274  00001274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800026c  0800026c  00001274  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800026c  0800026c  00001274  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800026c  08000274  00001274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000270  08000270  00001270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000274  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000274  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000aa  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000005e  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000031  00000000  00000000  000013a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000024  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000028  00000000  00000000  00001400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000007a  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000001a  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000254 	.word	0x08000254

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000254 	.word	0x08000254

08000170 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

	ldr		r0, =_estack
 8000170:	4831      	ldr	r0, [pc, #196]	@ (8000238 <check+0x4c>)
 	mov		sp, r0          			@ set stack pointer
 8000172:	4685      	mov	sp, r0

	ldr		r0, =PERIPH_BB_BASE + (RCC_APB2ENR-PERIPH_BASE)*32 + 4*4
 8000174:	4831      	ldr	r0, [pc, #196]	@ (800023c <check+0x50>)
										@ вычисляем адрес для BitBanding 4-го бита регистра RCC_APB2ENR
	mov		r1, #1						@ включаем тактирование порта C (в 4-й бит RCC_APB2ENR пишем '1`)
 8000176:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем это значение
 800017a:	6001      	str	r1, [r0, #0]

	ldr		r0, =GPIOC_CRL				@ адрес порта
 800017c:	4830      	ldr	r0, [pc, #192]	@ (8000240 <check+0x54>)
	mov		r1, #0x03					@ 4-битная маска настроек для Output mode 50mHz, Push-Pull ("0011")
 800017e:	f04f 0103 	mov.w	r1, #3
	ldr		r2, [r0]					@ считать порт
 8000182:	6802      	ldr	r2, [r0, #0]
	bfi		r2, r1, #0, #4    			@ скопировать биты маски в позицию PIN0
 8000184:	f361 0203 	bfi	r2, r1, #0, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 8000188:	6002      	str	r2, [r0, #0]
	bfi		r2, r1, #4, #4    			@ скопировать биты маски в позицию PIN1
 800018a:	f361 1207 	bfi	r2, r1, #4, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 800018e:	6002      	str	r2, [r0, #0]
	bfi		r2, r1, #16, #4    			@ скопировать биты маски в позицию PIN4
 8000190:	f361 4213 	bfi	r2, r1, #16, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 8000194:	6002      	str	r2, [r0, #0]
	bfi		r2, r1, #20, #4    			@ скопировать биты маски в позицию PIN5
 8000196:	f361 5217 	bfi	r2, r1, #20, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 800019a:	6002      	str	r2, [r0, #0]
	bfi		r2, r1, #24, #4    			@ скопировать биты маски в позицию PIN6
 800019c:	f361 621b 	bfi	r2, r1, #24, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 80001a0:	6002      	str	r2, [r0, #0]

	ldr		r0, =GPIOC_CRH				@ адрес порта
 80001a2:	4828      	ldr	r0, [pc, #160]	@ (8000244 <check+0x58>)
	ldr		r2, [r0]					@ считать порт
 80001a4:	6802      	ldr	r2, [r0, #0]
	bfi		r2, r1, #0, #4    			@ скопировать биты маски в позицию PIN8
 80001a6:	f361 0203 	bfi	r2, r1, #0, #4
	str		r2, [r0]					@ загрузить результат в регистр настройки порта
 80001aa:	6002      	str	r2, [r0, #0]

	ldr		r0, =GPIOC_BSRR				@ адрес порта выходных сигналов
 80001ac:	4826      	ldr	r0, [pc, #152]	@ (8000248 <check+0x5c>)

080001ae <loop>:

loop:									@ Бесконечный цикл

	ldr     r5, =GPIOC_IDR
 80001ae:	4d27      	ldr	r5, [pc, #156]	@ (800024c <check+0x60>)
	ldr     r6, [r5]
 80001b0:	682e      	ldr	r6, [r5, #0]

	ldr		r1, =GPIO_BSRR_BR0
 80001b2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
	str 	r1, [r0]
 80001b6:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BR1
 80001b8:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
	str 	r1, [r0]
 80001bc:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BR4
 80001be:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
	str 	r1, [r0]
 80001c2:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BR5
 80001c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
	str 	r1, [r0]
 80001c8:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BR6
 80001ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
	str 	r1, [r0]
 80001ce:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BR8
 80001d0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
	str 	r1, [r0]
 80001d4:	6001      	str	r1, [r0, #0]

	tst     r6, #0b100
 80001d6:	f016 0f04 	tst.w	r6, #4
	it		EQ
 80001da:	bf08      	it	eq
	bleq	check
 80001dc:	f000 f806 	bleq	80001ec <check>

	tst     r6, #0b1000
 80001e0:	f016 0f08 	tst.w	r6, #8
	it		EQ
 80001e4:	bf08      	it	eq
	bleq	check
 80001e6:	f000 f801 	bleq	80001ec <check>

	b 		loop						@ возвращаемся к началу цикла
 80001ea:	e7e0      	b.n	80001ae <loop>

080001ec <check>:

check:
	ldr		r1, =GPIO_BSRR_BS1
 80001ec:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]
 80001f0:	6001      	str	r1, [r0, #0]
	ldr     r5, =GPIOC_IDR
 80001f2:	4d16      	ldr	r5, [pc, #88]	@ (800024c <check+0x60>)
	ldr     r6, [r5]
 80001f4:	682e      	ldr	r6, [r5, #0]

	tst     r6, #0b100
 80001f6:	f016 0f04 	tst.w	r6, #4
	itt		EQ
 80001fa:	bf04      	itt	eq
	ldreq	r1, =GPIO_BSRR_BS4
 80001fc:	f04f 0110 	moveq.w	r1, #16
	streq 	r1, [r0]
 8000200:	6001      	streq	r1, [r0, #0]

	tst     r6, #0b1000
 8000202:	f016 0f08 	tst.w	r6, #8
	itt		EQ
 8000206:	bf04      	itt	eq
	ldreq	r1, =GPIO_BSRR_BS5
 8000208:	f04f 0120 	moveq.w	r1, #32
	streq 	r1, [r0]
 800020c:	6001      	streq	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR1
 800020e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
	str 	r1, [r0]
 8000212:	6001      	str	r1, [r0, #0]
	ldr		r1, =GPIO_BSRR_BS0
 8000214:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]
 8000218:	6001      	str	r1, [r0, #0]
	ldr     r5, =GPIOC_IDR
 800021a:	4d0c      	ldr	r5, [pc, #48]	@ (800024c <check+0x60>)
	ldr     r6, [r5]
 800021c:	682e      	ldr	r6, [r5, #0]


	tst     r6, #0b100
 800021e:	f016 0f04 	tst.w	r6, #4
	itt		EQ
 8000222:	bf04      	itt	eq
	ldreq	r1, =GPIO_BSRR_BS6
 8000224:	f04f 0140 	moveq.w	r1, #64	@ 0x40
	streq 	r1, [r0]
 8000228:	6001      	streq	r1, [r0, #0]

	tst     r6, #0b1000
 800022a:	f016 0f08 	tst.w	r6, #8
	itt		EQ
 800022e:	bf04      	itt	eq
	ldreq	r1, =GPIO_BSRR_BS8
 8000230:	f44f 7180 	moveq.w	r1, #256	@ 0x100
	streq 	r1, [r0]
 8000234:	6001      	streq	r1, [r0, #0]

	bx		LR
 8000236:	4770      	bx	lr
	ldr		r0, =_estack
 8000238:	20005000 	.word	0x20005000
	ldr		r0, =PERIPH_BB_BASE + (RCC_APB2ENR-PERIPH_BASE)*32 + 4*4
 800023c:	42420310 	.word	0x42420310
	ldr		r0, =GPIOC_CRL				@ адрес порта
 8000240:	40011000 	.word	0x40011000
	ldr		r0, =GPIOC_CRH				@ адрес порта
 8000244:	40011004 	.word	0x40011004
	ldr		r0, =GPIOC_BSRR				@ адрес порта выходных сигналов
 8000248:	40011010 	.word	0x40011010
	ldr     r5, =GPIOC_IDR
 800024c:	40011008 	.word	0x40011008

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <_init>:
 8000254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000256:	bf00      	nop
 8000258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025a:	bc08      	pop	{r3}
 800025c:	469e      	mov	lr, r3
 800025e:	4770      	bx	lr

08000260 <_fini>:
 8000260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000262:	bf00      	nop
 8000264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000266:	bc08      	pop	{r3}
 8000268:	469e      	mov	lr, r3
 800026a:	4770      	bx	lr
