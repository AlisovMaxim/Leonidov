
ChangeLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0000139c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000394  08000394  0000139c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000394  0800039c  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007d2  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001db  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000044  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff5e  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000693  00000000  00000000  00011d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548a6  00000000  00000000  00012415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066cbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  00066d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00066dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800037c 	.word	0x0800037c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800037c 	.word	0x0800037c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	@ (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	@ (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <EXTI15_10_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI15_10_IRQHandler()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR13)
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <EXTI15_10_IRQHandler+0x34>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000208:	2b00      	cmp	r3, #0
 800020a:	d00e      	beq.n	800022a <EXTI15_10_IRQHandler+0x2e>
	{
		delay(100000);
 800020c:	4809      	ldr	r0, [pc, #36]	@ (8000234 <EXTI15_10_IRQHandler+0x38>)
 800020e:	f000 f853 	bl	80002b8 <delay>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8000212:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <EXTI15_10_IRQHandler+0x3c>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <EXTI15_10_IRQHandler+0x3c>)
 8000218:	f083 0320 	eor.w	r3, r3, #32
 800021c:	60d3      	str	r3, [r2, #12]
		EXTI->PR |= EXTI_PR_PR13;
 800021e:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <EXTI15_10_IRQHandler+0x34>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <EXTI15_10_IRQHandler+0x34>)
 8000224:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000228:	6153      	str	r3, [r2, #20]
	}
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	000186a0 	.word	0x000186a0
 8000238:	40010800 	.word	0x40010800

0800023c <main>:

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	//Тактирование A
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <main+0x6c>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a18      	ldr	r2, [pc, #96]	@ (80002a8 <main+0x6c>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6193      	str	r3, [r2, #24]
	//PA5 на выход
	GPIOA->CRL &= ~GPIO_CRL_CNF5;
 800024c:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <main+0x70>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <main+0x70>)
 8000252:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5;
 8000258:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <main+0x70>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a13      	ldr	r2, [pc, #76]	@ (80002ac <main+0x70>)
 800025e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000262:	6013      	str	r3, [r2, #0]
	//Тактирование C
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000264:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <main+0x6c>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a0f      	ldr	r2, [pc, #60]	@ (80002a8 <main+0x6c>)
 800026a:	f043 0311 	orr.w	r3, r3, #17
 800026e:	6193      	str	r3, [r2, #24]
	//Настройка альтернативной функции на порт C
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <main+0x74>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <main+0x74>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6153      	str	r3, [r2, #20]
	//Настройка прерывания
	EXTI->IMR |= EXTI_IMR_MR13;
 800027c:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x78>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <main+0x78>)
 8000282:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000286:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_FT13;
 8000288:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <main+0x78>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a09      	ldr	r2, [pc, #36]	@ (80002b4 <main+0x78>)
 800028e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000292:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000294:	2028      	movs	r0, #40	@ 0x28
 8000296:	f7ff ff6b 	bl	8000170 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	2028      	movs	r0, #40	@ 0x28
 800029e:	f7ff ff83 	bl	80001a8 <__NVIC_SetPriority>

	for(;;)
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x66>
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010000 	.word	0x40010000
 80002b4:	40010400 	.word	0x40010400

080002b8 <delay>:

	}
}

void delay(uint32_t takts)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<takts; i++);
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	e002      	b.n	80002cc <delay+0x14>
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d3f8      	bcc.n	80002c6 <delay+0xe>
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	@ (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	@ (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000312:	f7ff ff93 	bl	800023c <main>

08000316 <LoopForever>:

LoopForever:
  b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2600      	movs	r6, #0
 8000338:	4d0c      	ldr	r5, [pc, #48]	@ (800036c <__libc_init_array+0x38>)
 800033a:	4c0d      	ldr	r4, [pc, #52]	@ (8000370 <__libc_init_array+0x3c>)
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	f000 f81a 	bl	800037c <_init>
 8000348:	2600      	movs	r6, #0
 800034a:	4d0a      	ldr	r5, [pc, #40]	@ (8000374 <__libc_init_array+0x40>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	@ (8000378 <__libc_init_array+0x44>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f855 3b04 	ldr.w	r3, [r5], #4
 800035c:	4798      	blx	r3
 800035e:	3601      	adds	r6, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f855 3b04 	ldr.w	r3, [r5], #4
 8000366:	4798      	blx	r3
 8000368:	3601      	adds	r6, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
