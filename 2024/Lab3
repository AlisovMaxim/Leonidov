#include <main.h>

int U[3] = {5,30,99};
int i = 0, j = 0, brightness = 99;
int P[3] = {250, 500, 1000};
int prd=250;

char ZnchR[256];
char ZnchB[256];
char ZnchP[256];
char RxBuffer[256];        // Буффер приема
char TxBuffer[256];        // Буффер отправки
bool CommandReceive;      // Флаг на прием

void init_usart2(void) {
  RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;  // Вкл тактирование usart2

  //PA2 - OUT    PA3 - INPUT
  GPIOA -> CRL &= ~(GPIO_CRL_CNF2 | GPIO_CRL_MODE2);  // 0000
  GPIOA -> CRL |= (GPIO_CRL_MODE2 | GPIO_CRL_CNF2_1);  // 1011
  // 139
  USART2->BRR = 0x7D;                  // Скорость передачи по usart2 = 256000
  USART2 -> CR1 |= USART_CR1_UE | USART_CR1_TE    // Вкл usart2, вкл передачу
        | USART_CR1_RE | USART_CR1_RXNEIE;    // вкл прием, прерывание по приему
  NVIC_EnableIRQ(USART2_IRQn);            // Разрешение прерывания
  NVIC_SetPriority(USART2_IRQn, 0);          // Выставление приоритета

}

void send_string(char *str) {
  strcat(str, "\r");            // Добавляем в конец символ конца строки
  for (uint8_t i = 0; i < strlen(str); i++)
  {
    USART2 -> DR = str[i];          // Считываем символ в DR
    while (!(USART2 -> SR & USART_SR_TC));
    // Передача символа завершена
  }
}
void USART2_IRQHandler(void) {
  if (USART2 -> SR & USART_SR_RXNE) {    // Проверка на данные
    char tmp = USART2 -> DR;      // Считываем данные из DR
    int pointer = strlen(RxBuffer);   // Переопределяем позицию
    RxBuffer[pointer] = tmp;
    if ((RxBuffer[pointer] == 0x0D)) {    // \r (завершен или нет прием)
      CommandReceive = true;
      return;
    }
  }
}

int main(void) {
  init_PA();
  init_tim2();
  init_tim3();
  init_clk();
  init_usart2();
  while(true){
    if (CommandReceive == true) {   // проверка на usart
      CommandReceive = false;
      if (strncmp(RxBuffer, "*IDN?", 5) == 0) {        // Сравниваем пришедшие символы со строкой
          strcpy(TxBuffer, "Alisov Turchinskiy Yakimov");  // Копируем символы для отправки
      }
      //----
      else if (strncmp(RxBuffer, "*BRIGHTNESS?", 5) == 0) {        // Сравниваем пришедшие символы со строкой
        snprintf(ZnchB, 256, "%d", brightness);
        strcpy(TxBuffer, ZnchB);// Копируем символы для отправки
            }
      else if (strncmp(RxBuffer, "*PERIOD?", 5) == 0) {        // Сравниваем пришедшие символы со строкой
        snprintf(ZnchP, 256, "%d", prd);
        strcpy(TxBuffer, ZnchP);  // Копируем символы для отправки
            }
      //----
      else if(strncmp(RxBuffer, "REGIME", 6)== 0){
        uint16_t tmp = 111;    // read to tmp
        sscanf(RxBuffer, "%*s %hu", &tmp);
        if ((tmp >= 1) && (tmp <= 3)) {
          i = tmp-1;
          brightness = U[i];
          snprintf(ZnchB, 256, "%d", brightness);
          strcpy(TxBuffer, "OK");
        }
        else {
          strcpy(TxBuffer, "Out of range");
        }
      }
      else if(strncmp(RxBuffer, "BRIGHTNESS", 10)== 0){
              uint16_t tmp = 111;    // read to tmp
              sscanf(RxBuffer, "%*s %hu", &tmp);
            if ((tmp >= 0) && (tmp <= 100)) {
              brightness = tmp;
              snprintf(ZnchB, 256, "%d", brightness);
              strcpy(TxBuffer, "OK");
            }
            else {
              strcpy(TxBuffer, "Out of range");
            }
      }
      else if(strncmp(RxBuffer, "PERIOD", 6)== 0){
                      uint16_t tmp = 111;    // read to tmp
                      sscanf(RxBuffer, "%*s %hu", &tmp);
                  if ((tmp >= 90) && (tmp <= 3000)) {
                    TIM3->ARR = tmp;
                    prd = tmp;
                    snprintf(ZnchP, 256, "%d", tmp);
                    strcpy(TxBuffer, "OK");
                  }
                  else {
                    strcpy(TxBuffer, "Out of range");
                  }
            }
      else{
        strcpy(TxBuffer, "Unknown Command");
      }
      send_string(TxBuffer);          // Вызов ф-ции для отправки сообщения
      memset(RxBuffer, 0, 256);        // очищаем RxBuffer
  }
}
}

void init_PA(void)
{
  RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
  RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
  GPIOA -> CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
  GPIOA -> CRL |= GPIO_CRL_CNF0_1;
  GPIOA -> CRL |= GPIO_CRL_MODE0;

  AFIO -> EXTICR[1] |= AFIO_EXTICR2_EXTI6_PA;
  EXTI -> FTSR |= EXTI_FTSR_TR6;
  EXTI -> IMR |= EXTI_IMR_MR6;
  GPIOA -> CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
  GPIOA -> CRL |= GPIO_CRL_CNF6_1;

  AFIO -> EXTICR[1] |= AFIO_EXTICR2_EXTI7_PA;
  EXTI -> FTSR |= EXTI_FTSR_TR7;
  EXTI -> IMR |= EXTI_IMR_MR7;
  GPIOA -> CRL &= ~(GPIO_CRL_CNF7 | GPIO_CRL_MODE7);
  GPIOA -> CRL |= GPIO_CRL_CNF7_1;

  AFIO -> EXTICR[2] |= AFIO_EXTICR4_EXTI12_PA;
  EXTI -> FTSR |= EXTI_FTSR_TR12;
  EXTI -> IMR |= EXTI_IMR_MR12;
  GPIOA -> CRH &= ~(GPIO_CRH_CNF12 | GPIO_CRH_MODE12);
  GPIOA -> CRH |= GPIO_CRH_CNF12_1;

  AFIO -> EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;
  EXTI -> FTSR |= EXTI_FTSR_TR11;
  EXTI -> IMR |= EXTI_IMR_MR11;
  GPIOA -> CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
  GPIOA -> CRH |= GPIO_CRH_CNF11_1;

  NVIC_EnableIRQ(EXTI9_5_IRQn);
  NVIC_SetPriority(EXTI9_5_IRQn, 4);
  NVIC_EnableIRQ(EXTI15_10_IRQn);
  NVIC_SetPriority(EXTI15_10_IRQn, 5);
}

void EXTI9_5_IRQHandler () {
  if (EXTI->PR & EXTI_PR_PR6){
    delay (1000);
        if(i>0){
          i--;
          brightness = U[i];
          snprintf(ZnchR, 256, "%d", i+1);
          strcpy(TxBuffer, ZnchR);
          send_string(TxBuffer);          // Вызов ф-ции для отправки сообщения
          memset(RxBuffer, 0, 256);
        }
        while ((GPIOA->IDR & GPIO_IDR_IDR6)==0){
        }
        delay(1000);
        EXTI -> PR |= EXTI_PR_PR6;
        return;
  }
  if (EXTI->PR & EXTI_PR_PR7){
      delay (1000);
          if(i<2){
            i++;
            brightness = U[i];
            snprintf(ZnchR, 256, "%d", i+1);
            strcpy(TxBuffer, ZnchR);
            send_string(TxBuffer);          // Вызов ф-ции для отправки сообщения
            memset(RxBuffer, 0, 256);
          }
          while ((GPIOA->IDR & GPIO_IDR_IDR7)==0){
          }
          delay(1000);
          EXTI -> PR |= EXTI_PR_PR7;
    }

}

void EXTI15_10_IRQHandler () {
  if (EXTI->PR & EXTI_PR_PR12){
    delay (1000);
        if(j>0){
          j--;
          TIM3 -> ARR = P[j];
          prd = P[j];
          TIM3 -> CNT = 0;
        }
        while ((GPIOA->IDR & GPIO_IDR_IDR12)==0){
        }
        delay(1000);
        EXTI -> PR |= EXTI_PR_PR12;
        return;
  }
  if (EXTI->PR & EXTI_PR_PR11){
    delay (1000);
        if(j<2){
          j++;
          TIM3 -> ARR = P[j];
          prd = P[j];
          TIM3 -> CNT = 0;
        }
        while ((GPIOA->IDR & GPIO_IDR_IDR11)==0){
        }
        delay(1000);
        EXTI -> PR |= EXTI_PR_PR11;
  }
}

void init_tim2(void)
{
  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
  TIM2 -> CCER = TIM_CCER_CC1E;
  TIM2 -> PSC = 64 - 1;
  TIM2 -> ARR = 100;
  TIM2 -> CR1 |= TIM_CR1_CEN;
  TIM2 -> CCER |= 1;
  TIM2 -> CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
}

void init_tim3(void)
{
  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;

  TIM3->PSC = 64000 - 1;
  TIM3->ARR = P[j];
  TIM3->DIER |= TIM_DIER_UIE;
  TIM3->CR1 |= TIM_CR1_CEN;

  NVIC_EnableIRQ(TIM3_IRQn);
  NVIC_SetPriority(TIM3_IRQn, 2);
}
void TIM3_IRQHandler(void) {
  if(TIM2 -> CCR1) TIM2 -> CCR1 = 0;
  else TIM2 -> CCR1 = brightness;
  TIM3 -> SR &= ~TIM_SR_UIF;
}

void init_clk(void)
{
  RCC->CR |= RCC_CR_HSION;
  while(!(RCC->CR & RCC_CR_HSIRDY)){};

  FLASH->ACR |= FLASH_ACR_PRFTBE;

  FLASH->ACR &= ~FLASH_ACR_LATENCY;
  FLASH->ACR |= FLASH_ACR_LATENCY_2;

  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;

  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;

  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

  RCC->CFGR &= ~RCC_CFGR_PLLSRC;
  RCC->CFGR |= RCC_CFGR_PLLMULL16;

  RCC->CR |= RCC_CR_PLLON;

  while((RCC->CR & RCC_CR_PLLRDY) == 0) {};

  RCC->CFGR &= ~RCC_CFGR_SW;
  RCC->CFGR |= RCC_CFGR_SW_PLL;

  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
}
void delay(uint32_t value) {
  for (uint32_t i = 0; i < value; i++);
}
